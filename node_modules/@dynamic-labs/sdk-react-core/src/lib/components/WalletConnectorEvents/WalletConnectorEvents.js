'use client'
import { useEffect } from 'react';
import { walletConnectorEvents } from '@dynamic-labs/wallet-connector-core';
import { useWalletItemActions } from '../../utils/hooks/useWalletItemActions/useWalletItemActions.js';
import '../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../shared/logger.js';
import '@dynamic-labs/iconic';
import 'react/jsx-runtime';
import '../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../store/state/loadingAndLifecycle.js';
import '../../shared/consts/index.js';
import '../../events/dynamicEvents.js';
import '../../../../_virtual/_tslib.js';
import '../../context/CaptchaContext/CaptchaContext.js';
import '../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../config/ApiEndpoint.js';
import '../../store/state/user/user.js';
import '../../locale/locale.js';
import '../../store/state/projectSettings/projectSettings.js';
import '../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../context/AccountExistsContext/AccountExistsContext.js';
import '../../context/UserWalletsContext/UserWalletsContext.js';
import '../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../context/WalletContext/WalletContext.js';
import '../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../context/ThemeContext/ThemeContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../context/MockContext/MockContext.js';
import '../../views/CollectUserDataView/useFields.js';
import '../../context/FieldsStateContext/FieldsStateContext.js';
import '../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../store/state/environmentId.js';
import { setWalletConnectorOptions } from '../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../Accordion/components/AccordionItem/AccordionItem.js';
import '../Alert/Alert.js';
import '../ShadowDOM/ShadowDOM.js';
import '../IconButton/IconButton.js';
import '../InlineWidget/InlineWidget.js';
import '../Input/Input.js';
import '../IsBrowser/IsBrowser.js';
import '../MenuList/Dropdown/Dropdown.js';
import '../Transition/ZoomTransition/ZoomTransition.js';
import '../Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../Transition/OpacityTransition/OpacityTransition.js';
import '../OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../Popper/Popper/Popper.js';
import '../Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../context/FooterAnimationContext/index.js';
import '../../context/WalletGroupContext/WalletGroupContext.js';
import '../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../context/PasskeyContext/PasskeyContext.js';
import '../../store/state/sendBalances.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'bs58';
import '../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../index.js';
import '../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const WalletConnectorEvents = () => {
    const { walletConnectorOptions, primaryWallet } = useInternalDynamicContext();
    const { handleWalletItemClick } = useWalletItemActions();
    // add listener for providerReady event
    useEffect(() => {
        const handleProviderReady = ({ connector, }) => {
            logger.debug('[WalletConnectorEvents] handleProviderReady', {
                connector,
            });
            const updatedConnectors = walletConnectorOptions.map((walletOption) => {
                if (walletOption.key === connector.key) {
                    return Object.assign(Object.assign({}, walletOption), { isInstalledOnBrowser: connector.isInstalledOnBrowser(), walletConnector: connector });
                }
                return walletOption;
            });
            setWalletConnectorOptions(updatedConnectors);
        };
        walletConnectorEvents.on('providerReady', handleProviderReady);
        return () => {
            walletConnectorEvents.off('providerReady', handleProviderReady);
        };
    }, [walletConnectorOptions]);
    // add listener for autoConnect event
    useEffect(() => {
        const handleAutoConnect = ({ connector, }) => {
            logger.debug('[WalletConnectorEvents] handleAutoConnect', { connector });
            const walletOption = walletConnectorOptions.find((wallet) => wallet.walletConnector.key === connector.key);
            if (!walletOption)
                return;
            handleWalletItemClick(walletOption);
        };
        // if there's a connected wallet, we should not auto connect another wallet
        if (primaryWallet) {
            return;
        }
        walletConnectorEvents.on('autoConnect', handleAutoConnect);
        return () => {
            walletConnectorEvents.off('autoConnect', handleAutoConnect);
        };
    }, [handleWalletItemClick, walletConnectorOptions, primaryWallet]);
    return null;
};

export { WalletConnectorEvents };
