'use client'
import { useRef } from 'react';
import { useLoadingAndLifecycle } from '../../../../store/state/loadingAndLifecycle.js';
import { logger } from '../../../logger.js';
import { lastAuthenticatedAccount } from '../../functions/lastAuthenticatedAccount/index.js';

const useGlobalLoading = ({ authMode, connectedInfo, connectedWallets, projectSettings, primaryWalletId, primaryWallet, user, isLoadingUserFromCookie, walletBook, enableInstrumentation, appName, environmentId, }) => {
    var _a, _b;
    // Once we declare the SDK as loaded, we do not ever want to flip back to false
    const hasLoaded = useRef(false);
    const loadingStart = useRef(new Date().getTime());
    const { sessionValidation } = useLoadingAndLifecycle();
    const finishLoading = () => {
        if (hasLoaded.current)
            return;
        hasLoaded.current = true;
        logger.debug('[useGlobalLoading] SDK finished loading', {
            authMode,
            enableInstrumentation,
            primaryWallet,
            user,
        });
        // Calculate how long loading took and emit log
        if (enableInstrumentation) {
            const loadingTime = new Date().getTime() - loadingStart.current;
            // Pass as default arg and as an object. The object value will be injected
            // in the log later on, keeping its format as a number for calculation purposes
            logger.instrument(`SDK loaded in (ms) ${loadingTime}`, {
                appName,
                environmentId,
                key: 'sdkHasLoaded',
                primaryWalletId,
                time: loadingTime,
                userId: user === null || user === void 0 ? void 0 : user.userId,
            });
        }
    };
    if (hasLoaded.current)
        return true;
    const isWalletBookLoading = !Object.keys((_a = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _a !== void 0 ? _a : {}).length;
    const isProjectSettingsLoading = !projectSettings;
    const isUserLoading = isLoadingUserFromCookie;
    const shouldHavePrimaryWallet = primaryWalletId ||
        (user && ((_b = lastAuthenticatedAccount(user)) === null || _b === void 0 ? void 0 : _b.format) === 'blockchain');
    const isPrimaryWalletLoading = Boolean(shouldHavePrimaryWallet && !primaryWallet);
    const isConnectOnlyWalletsLoading = authMode === 'connect-only' &&
        connectedInfo &&
        connectedWallets.length === 0;
    const isValidatingSession = !sessionValidation;
    logger.logVerboseTroubleshootingMessage('[useGlobalLoading] SDK loading', {
        isConnectOnlyWalletsLoading,
        isPrimaryWalletLoading,
        isProjectSettingsLoading,
        isUserLoading,
        isValidatingSession,
        isWalletBookLoading,
    });
    if (!isWalletBookLoading &&
        !isProjectSettingsLoading &&
        !isUserLoading &&
        !isPrimaryWalletLoading &&
        !isConnectOnlyWalletsLoading &&
        !isValidatingSession) {
        finishLoading();
    }
    return hasLoaded.current;
};

export { useGlobalLoading };
