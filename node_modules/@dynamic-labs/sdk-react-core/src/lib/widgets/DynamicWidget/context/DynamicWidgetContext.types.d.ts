import { Dispatch, RefObject, SetStateAction } from 'react';
import { ConnectedAppsViewProps } from '../views/ConnectedAppsView/ConnectedAppsView';
export declare const DynamicSettingsViews: readonly ["settings"];
export type DynamicSettingsType = typeof DynamicSettingsViews[number];
export declare const DynamicGlobalWalletViews: readonly ["global-wallet", "connected-apps"];
export type DynamicGlobalWalletType = typeof DynamicGlobalWalletViews[number];
export declare const DynamicPasskeyWidgetViews: readonly ["manage-passkeys"];
export declare const DynamicMfaWidgetViews: readonly ["manage-mfa"];
export type DynamicPasskeyWidgetViewsType = typeof DynamicPasskeyWidgetViews[number];
export type DynamicMfaWidgetViewsType = typeof DynamicMfaWidgetViews[number];
export declare const DynamicTransactionsWidgetViews: readonly ["send-balance"];
export type DynamicTransactionsWidgetViewsType = typeof DynamicTransactionsWidgetViews[number];
export type DynamicWidgetViews = 'wallets' | 'profile' | 'edit-profile' | DynamicTransactionsWidgetViewsType | DynamicPasskeyWidgetViewsType | DynamicMfaWidgetViewsType | DynamicSettingsType | DynamicGlobalWalletType | 'connected-apps';
export type ViewProps = {
    'connected-apps': ConnectedAppsViewProps;
};
export type WidgetContextProps = {
    availableWalletsContainerRef: RefObject<HTMLDivElement>;
    dynamicWidgetView: DynamicWidgetViews;
    goToInitialDynamicWidgetView: () => void;
    goToProfileView: () => void;
    inlineControlsRef: RefObject<HTMLDivElement>;
    isOpen: boolean;
    overridenWidgetView: DynamicWidgetViews;
    setDynamicWidgetView: <T extends DynamicWidgetViews>(view: T, props?: T extends keyof ViewProps ? ViewProps[T] : never) => void;
    setIsOpen: Dispatch<SetStateAction<boolean>>;
    widgetRef: RefObject<HTMLDivElement>;
    viewProps: Record<string, unknown>;
};
