'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
var bs58 = require('bs58');
var utils = require('@dynamic-labs/utils');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
var useEffectOnce = require('../../shared/utils/hooks/useEffectOnce/useEffectOnce.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
require('../../events/dynamicEvents.cjs');
require('../../context/CaptchaContext/CaptchaContext.cjs');
require('../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../config/ApiEndpoint.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/projectSettings/projectSettings.cjs');
require('../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../context/WalletContext/WalletContext.cjs');
require('../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
var usePromise = require('../../utils/hooks/usePromise/usePromise.cjs');
require('../../context/ThemeContext/ThemeContext.cjs');
var useForceUpdate = require('../../utils/hooks/useForceUpdate/useForceUpdate.cjs');
var useInterval = require('../../utils/hooks/useInterval/useInterval.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
var useMutation = require('../../utils/hooks/useMutation/useMutation.cjs');
require('@dynamic-labs/types');
require('../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../context/MockContext/MockContext.cjs');
require('../CollectUserDataView/useFields.cjs');
require('../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../store/state/environmentId.cjs');
require('../../store/state/walletConnectorOptions.cjs');
require('../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
var Alert = require('../../components/Alert/Alert.cjs');
var Typography = require('../../components/Typography/Typography.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/Input/Input.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
var useFetchCurrency = require('../../widgets/DynamicWidget/hooks/useFetchCurrency/useFetchCurrency.cjs');
require('formik');
require('../../context/FooterAnimationContext/index.cjs');
require('../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../context/PasskeyContext/PasskeyContext.cjs');
require('../../store/state/sendBalances.cjs');
var TransactionConfirmationPageLayout = require('../../components/TransactionConfirmationPageLayout/TransactionConfirmationPageLayout.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
var blockaid = require('../../data/api/transactions/blockaid.cjs');
var useTransactionTotal = require('./hooks/useTransactionTotal/useTransactionTotal.cjs');
var transactionErrorMessage = require('./helpers/transactionErrorMessage.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../index.cjs');
require('../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var bs58__default = /*#__PURE__*/_interopDefaultLegacy(bs58);

const FEE_REFRESH_INTERVAL = 20000;
const TransactionConfirmationView = ({ transaction, onError, onSuccess, mutation, onClickBack, walletConnector, onClickClose, title, displayPoweredByDynamicFooter = false, copykey, hideModal, currentToken, isNativeToken, transactionValue, isModal, sendBalanceTransaction, }) => {
    var _a, _b;
    const { primaryWallet, environmentId } = useInternalDynamicContext.useInternalDynamicContext();
    const [isGasSponsored, setIsGasSponsored] = React.useState(false);
    const update = useForceUpdate.useForceUpdate();
    const { t } = reactI18next.useTranslation();
    const { currency } = useFetchCurrency.useFetchCurrency(walletConnector);
    // Update the chainId access to handle undefined case
    const chainId = React.useMemo(() => {
        if (!(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector)) {
            return undefined;
        }
        const connector = primaryWallet.connector;
        return connector._selectedChainId || connector.lastUsedChainId;
    }, [primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector]);
    const [simulationResult, setSimulationResult] = React.useState(undefined);
    const [isSimulationComplete, setIsSimulationComplete] = React.useState(false);
    useEffectOnce.useEffectOnce(() => {
        const fetchSimulationResult = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
            var _a, _b;
            if (sendBalanceTransaction || hideModal) {
                setIsSimulationComplete(true);
                return;
            }
            // Skip simulation if chainId is not available
            if (!chainId && (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain) !== 'SOL') {
                setIsSimulationComplete(true);
                return;
            }
            let result;
            try {
                // SOLANA
                if (!chainId) {
                    const encodedTransactions = (_a = transaction.multipleTransactions) === null || _a === void 0 ? void 0 : _a.map((tx) => bs58__default["default"].encode(tx.serialize({ requireAllSignatures: false })));
                    if (!encodedTransactions) {
                        setIsSimulationComplete(true);
                        return;
                    }
                    result = yield blockaid.simulateBlockaidSVMTransaction({
                        accountAddress: transaction.from,
                        chain: (yield (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.getNetwork())),
                        environmentId,
                        transactions: encodedTransactions,
                    });
                }
                else {
                    // EVM
                    result = yield blockaid.simulateBlockaidEVMTransaction({
                        chainId: String(chainId),
                        data: transaction.data || '0x',
                        environmentId,
                        from: transaction.from,
                        to: transaction.to || '',
                        value: ((_b = transaction.value) === null || _b === void 0 ? void 0 : _b.toString()) || '0',
                    });
                }
            }
            catch (error) {
                setSimulationResult(undefined);
            }
            setSimulationResult(result);
            setIsSimulationComplete(true);
        });
        fetchSimulationResult();
    });
    /**
     * Update transaction fee and trigger a react update
     * to reflect the new fee on the UI
     */
    const fetchTransactionFee = () => {
        // solana fee doesnt need to be refreshed
        if ((primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain) === 'SOL' && transaction.fee.gas !== undefined)
            return;
        transaction.fetchFee().finally(update);
    };
    const { isLoading: isGasSponsoredLoading } = usePromise.usePromise(() => {
        if (!walletConnectorCore.isAccountAbstractionConnector(walletConnector)) {
            return false;
        }
        return walletConnector.canSponsorTransactionGas(transaction);
    }, {
        initialData: false,
        onReject: logger.logger.error,
        onResolve: (isGasSponsored) => {
            setIsGasSponsored(isGasSponsored);
            if (!isGasSponsored && walletConnectorCore.isAccountAbstractionConnector(walletConnector)) {
                walletConnector.disableGasSponsorshipOnce();
            }
        },
    });
    // solana gas sponsorship check
    if ((_a = transaction.isGasSponsored) === null || _a === void 0 ? void 0 : _a.call(transaction)) {
        setIsGasSponsored(true);
    }
    const { mutate: send, isLoading, error: transactionError, } = useMutation.useMutation(mutation, {
        onFailure: (error) => {
            fetchTransactionFee();
            if (utils.TransactionGasCannotBeSponsoredError.isInstance(error)) {
                logger.logger.debug(error);
                setIsGasSponsored(false);
                if (walletConnectorCore.isAccountAbstractionConnector(walletConnector)) {
                    walletConnector.disableGasSponsorshipOnce();
                }
            }
            logger.logger.error(error);
            onError === null || onError === void 0 ? void 0 : onError(error);
        },
        onSuccess: (tx) => onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(tx),
    });
    // Refresh transaction fee, Solana fees are static based on transaction data, dont need to refresh them
    useInterval.useInterval(fetchTransactionFee, isLoading ? null : FEE_REFRESH_INTERVAL);
    useEffectOnce.useEffectOnce(fetchTransactionFee);
    const total = useTransactionTotal.useTransactionTotal({
        gasTotalPrice: transaction.fee.gas,
        isGasSponsored,
        transactionValue: transaction.value,
    });
    const errorMessage = transactionError && transactionErrorMessage.transactionErrorMessage(transactionError);
    const { data: balance, isLoading: isBalanceLoading } = usePromise.usePromise(() => transaction.getBalance());
    const hasInsufficientFunds = React.useMemo(() => {
        if (!total || !balance)
            return false;
        return balance < total;
    }, [balance, total]);
    const missingFunds = React.useMemo(() => {
        if (!total || !balance)
            return undefined;
        return total - balance;
    }, [total, balance]);
    const alert = React.useMemo(() => {
        if (errorMessage)
            return null;
        if (utils.TransactionGasCannotBeSponsoredError.isInstance(transactionError)) {
            return (jsxRuntime.jsx(Alert.Alert, { icon: 'error', variant: 'error', copykey: 'dyn_send_transaction.error_message.gas_not_sponsored', children: t('dyn_send_transaction.error_message.gas_not_sponsored') }));
        }
        if (!isGasSponsoredLoading &&
            !isBalanceLoading &&
            missingFunds === undefined &&
            transaction.fee.gas &&
            !isGasSponsored) {
            return (jsxRuntime.jsxs(Alert.Alert, { icon: 'error', variant: 'error', contentDataTestId: 'warning_content', copykey: 'dyn_send_transaction.warning_message.insufficient_gas_funds', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'primary', children: t('dyn_send_transaction.warning_message.insufficient_gas_funds.title') }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'secondary', children: t('dyn_send_transaction.warning_message.insufficient_gas_funds.description', {
                            amountLeft: transaction.format(transaction.fee.gas, {
                                precision: 6,
                            }),
                            currencySymbol: currency,
                        }) })] }));
        }
        if (transaction.simulationFailed) {
            return (jsxRuntime.jsxs(Alert.Alert, { icon: 'error', variant: 'warning', contentDataTestId: 'warning_content', copykey: 'dyn_send_transaction.warning_message.failed_simulation', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'primary', children: t('dyn_send_transaction.warning_message.failed_simulation.title') }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'secondary', children: t('dyn_send_transaction.warning_message.failed_simulation.description') })] }));
        }
        const showInsufficientFundsWarningMessage = hasInsufficientFunds && missingFunds;
        if (!showInsufficientFundsWarningMessage)
            return;
        const amountLeft = transaction.format(missingFunds, { precision: 5 });
        return (jsxRuntime.jsxs(Alert.Alert, { icon: 'error', variant: 'warning', contentDataTestId: 'warning_content', copykey: 'dyn_send_transaction.warning_message.insufficient_funds', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'primary', children: t('dyn_send_transaction.warning_message.insufficient_funds.title') }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'secondary', children: t('dyn_send_transaction.warning_message.insufficient_funds.description', {
                        amountLeft,
                        currencySymbol: currency,
                    }) })] }));
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        transaction,
        errorMessage,
        transactionError,
        hasInsufficientFunds,
        missingFunds,
        t,
        currency,
        transaction.fee.gas,
        isLoading,
        simulationResult,
    ]);
    if (!isSimulationComplete) {
        return null;
    }
    // if simulation threw an error, or if there are no out assets for solana (which means the simulation failed)
    if ((!simulationResult ||
        (!simulationResult.outAssets.length &&
            !chainId &&
            !((_b = transaction.isGasSponsored) === null || _b === void 0 ? void 0 : _b.call(transaction)))) &&
        !sendBalanceTransaction) {
        transaction.simulationFailed = true;
    }
    return (jsxRuntime.jsx(TransactionConfirmationPageLayout.TransactionConfirmationPageLayout, { total: total, currentToken: currentToken, transactionValue: transactionValue, isNativeToken: isNativeToken, onClickBack: onClickBack, onClickClose: onClickClose, copykey: copykey, title: title, hideModal: hideModal, isLoading: isLoading, onClickSend: () => send(), onSuccess: (tx) => onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(tx), displayPoweredByDynamicFooter: displayPoweredByDynamicFooter, disableSendButton: isBalanceLoading, error: errorMessage, alert: alert, walletConnector: walletConnector, transaction: transaction, isGasSponsored: isGasSponsored, isGasSponsoredLoading: isGasSponsoredLoading, walletKey: (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.key) || '', simulationResult: simulationResult, sendBalanceTransaction: sendBalanceTransaction }));
};

exports.FEE_REFRESH_INTERVAL = FEE_REFRESH_INTERVAL;
exports.TransactionConfirmationView = TransactionConfirmationView;
