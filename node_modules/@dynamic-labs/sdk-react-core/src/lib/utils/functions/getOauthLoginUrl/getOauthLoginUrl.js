'use client'
import { ProviderEnum } from '@dynamic-labs/sdk-api-core';
import { isMobile } from '@dynamic-labs/utils';
import { stringifyURIQuery } from '../stringifyURIQuery/stringifyURIQuery.js';
import { getProviderByType } from '../getProviderByType/getProviderByType.js';

const APPLE_LOGIN_DATA = {
    customMobileUrl: true,
    response_mode: 'form_post',
    response_type: ['code', 'id_token'],
};
const getMobileOauthUrl = (provider, loginData) => {
    if (!(loginData === null || loginData === void 0 ? void 0 : loginData.customMobileUrl) || !isMobile() || !provider.redirectUrl) {
        return;
    }
    return provider.redirectUrl.replace('redirect', 'authorizeHtml');
};
const getOauthLoginUrl = (providers, providerType) => {
    var _a, _b;
    const provider = getProviderByType(providers, providerType);
    if (!(provider === null || provider === void 0 ? void 0 : provider.clientId)) {
        return '';
    }
    let loginData;
    if (providerType === ProviderEnum.Apple) {
        loginData = APPLE_LOGIN_DATA;
    }
    let loginBaseUrl;
    if (providerType === ProviderEnum.Telegram) {
        loginBaseUrl = (_a = provider.authorizationUrl) !== null && _a !== void 0 ? _a : '';
    }
    else if (provider.baseAuthUrl) {
        loginBaseUrl = provider.baseAuthUrl;
    }
    else {
        return '';
    }
    const mobileUrl = getMobileOauthUrl(provider, loginData);
    const baseProps = {
        client_id: provider.clientId,
        redirect_uri: (_b = provider.redirectUrl) !== null && _b !== void 0 ? _b : '',
        response_type: 'code',
    };
    if (provider.scopes) {
        baseProps.scope = provider.scopes;
    }
    if (loginData === null || loginData === void 0 ? void 0 : loginData.prompt) {
        baseProps.prompt = loginData.prompt.join(' ');
    }
    if (loginData === null || loginData === void 0 ? void 0 : loginData.response_mode) {
        baseProps.response_mode = loginData.response_mode;
    }
    if (loginData === null || loginData === void 0 ? void 0 : loginData.response_type) {
        baseProps.response_type = loginData.response_type.join(' ');
    }
    const params = stringifyURIQuery(baseProps);
    return `${mobileUrl !== null && mobileUrl !== void 0 ? mobileUrl : loginBaseUrl}?${params}`;
};

export { getOauthLoginUrl };
