'use client'
import { HardwareWalletEnum, WalletProviderEnum } from '@dynamic-labs/sdk-api-core';
import { isHardwareWalletConnector } from '@dynamic-labs/wallet-connector-core';
import { findWalletOptionFor } from '../../../../functions/findWalletOptionFor/findWalletOptionFor.js';
import { shouldManuallyReconnectOnRefresh } from '../../../../functions/shouldManuallyReconnectOnRefresh/shouldManuallyReconnectOnRefresh.js';
import { convertLegacyPhantomLedgerConnector } from '../convertLegacyPhantomLedgerConnector/convertLegacyPhantomLedgerConnector.js';
import { isOwnerOfASmartWallet, initializeSmartWallet } from '../smartWallet/smartWallet.js';

const createLinkedWalletsFromWalletOptions = ({ user, walletConnectorOptions, primaryWalletId, separateSmartWalletAndSigner, }) => {
    // wallet state should be null while loading all the wallets or when there is no user
    if (!walletConnectorOptions || !user) {
        return [];
    }
    return user.verifiedCredentials
        .map(convertLegacyPhantomLedger)
        .map((account) => {
        var _a, _b;
        const wallet = findWalletOptionFor(account, walletConnectorOptions);
        // this probably shouldn't happen. this would mean that the user has an account linked
        // with wallet W, but the customer has toggled off wallet W or the chain that
        // supports wallet W
        /* istanbul ignore next */
        if (!wallet)
            return null;
        if (account.id === primaryWalletId &&
            shouldManuallyReconnectOnRefresh(wallet.walletConnector)) {
            wallet.walletConnector.connect();
        }
        // only checking for ledger hardware wallets since we only specify ledger as a hardware wallet
        if (((_a = account.walletProperties) === null || _a === void 0 ? void 0 : _a.hardwareWallet) ===
            HardwareWalletEnum.Ledger &&
            isHardwareWalletConnector(wallet.walletConnector)) {
            wallet.walletConnector.isHardwareWalletEnabled = true;
        }
        // this account is the owner of a smart wallet, and should not be surfaced
        if (!separateSmartWalletAndSigner &&
            isOwnerOfASmartWallet(account, user.verifiedCredentials)) {
            return null;
        }
        if (account.address && account.chain) {
            if (account.walletProvider === WalletProviderEnum.SmartContractWallet) {
                initializeSmartWallet({
                    account,
                    primaryWalletId,
                    verifiedCredentials: user.verifiedCredentials,
                    walletConnectorOptions,
                });
            }
            return wallet.walletConnector.createWallet({
                additionalAddresses: account.walletAdditionalAddresses,
                address: account.address,
                chain: wallet.walletConnector.connectedChain,
                connector: wallet.walletConnector,
                id: account.id,
                isAuthenticated: true,
                key: (_b = account.walletName) !== null && _b !== void 0 ? _b : wallet.walletConnector.key,
            });
        }
        return null;
    })
        .filter((wc) => wc !== null);
};
const convertLegacyPhantomLedger = (account) => {
    if (account.walletName === 'phantomledger') {
        return convertLegacyPhantomLedgerConnector(account);
    }
    return account;
};

export { createLinkedWalletsFromWalletOptions };
