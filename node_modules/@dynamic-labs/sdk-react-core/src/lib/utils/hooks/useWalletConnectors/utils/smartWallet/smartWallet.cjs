'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../../_virtual/_tslib.cjs');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var values = require('../../../../constants/values.cjs');
var findWalletOptionFor = require('../../../../functions/findWalletOptionFor/findWalletOptionFor.cjs');

// assumes `account` input is a smart wallet (has a signerRefId) and attempts to find
// the associated eoa account
const findOwner = (account, verifiedCredentials) => verifiedCredentials.find((credential) => credential.id === account.signerRefId);
const findSmartWallet = (account, verifiedCredentials) => verifiedCredentials.find((credential) => credential.signerRefId === account.id);
const isOwnerOfASmartWallet = (account, verifiedCredentials) => Boolean(findSmartWallet(account, verifiedCredentials));
const initializeSmartWallet = (_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ account, verifiedCredentials, walletConnectorOptions, primaryWalletId, }) {
    var _b, _c, _d, _e, _f;
    const owner = findOwner(account, verifiedCredentials);
    if (!owner) {
        throw new Error('could not find associated eoa account for smart wallet');
    }
    const ownerWallet = findWalletOptionFor.findWalletOptionFor(owner, walletConnectorOptions);
    if (!ownerWallet) {
        throw new Error('could not find owner wallet from wallet options');
    }
    if (ownerWallet && walletConnectorCore.isTurnkeyWalletConnector(ownerWallet.walletConnector)) {
        const sortedVcs = (_c = (_b = ownerWallet.walletConnector) === null || _b === void 0 ? void 0 : _b.verifiedCredentials) === null || _c === void 0 ? void 0 : _c.reduce((acc, vc) => {
            if (vc.smartWalletRefAddress &&
                account.address &&
                account.chain &&
                walletConnectorCore.isSameAddress(vc.smartWalletRefAddress, account.address, values.VerifiedCredentialNameToChainEnum[account.chain])) {
                return [vc, ...acc];
            }
            return [...acc, vc];
        }, []);
        if (sortedVcs) {
            ownerWallet.walletConnector.setVerifiedCredentials(sortedVcs);
        }
    }
    const smartWallet = findWalletOptionFor.findWalletOptionFor(account, walletConnectorOptions);
    if (!smartWallet) {
        throw new Error('could not find smart wallet from wallet options');
    }
    const connector = smartWallet.walletConnector;
    if (!walletConnectorCore.isAccountAbstractionConnector(connector)) {
        throw new Error('could not initialize smart wallet');
    }
    if (!owner.address || !account.address) {
        throw new Error('could not find owner or smart wallet address');
    }
    const shouldSetEoaConnector = primaryWalletId === owner.id || primaryWalletId === account.id;
    yield connector.registerEoa({
        ecdsaProviderType: (_d = account.walletProperties) === null || _d === void 0 ? void 0 : _d.ecdsaProviderType,
        entryPointVersion: (_e = account.walletProperties) === null || _e === void 0 ? void 0 : _e.entryPointVersion,
        eoaAddress: owner.address,
        eoaConnector: ownerWallet.walletConnector,
        kernelVersion: (_f = account.walletProperties) === null || _f === void 0 ? void 0 : _f.kernelVersion,
        shouldSetEoaConnector,
        smartWalletAddress: account.address,
    });
});

exports.findOwner = findOwner;
exports.findSmartWallet = findSmartWallet;
exports.initializeSmartWallet = initializeSmartWallet;
exports.isOwnerOfASmartWallet = isOwnerOfASmartWallet;
