'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { sdkApi } from '../api.js';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '@dynamic-labs/multi-wallet';
import { getAppOrigin } from '../../../utils/functions/getAppOrigin/getAppOrigin.js';
import 'react-international-phone';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';

const isMaliciousUrl = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId, url, }) {
    try {
        const request = {
            environmentId,
            scanWebsiteUrlRequest: { url },
        };
        const data = yield sdkApi().scanUrl(request);
        return data.isMalicious;
    }
    catch (error) {
        return undefined;
    }
});
const simulateBlockaidEVMTransaction = (_b) => __awaiter(void 0, [_b], void 0, function* ({ environmentId, chainId, from, to, value, data, }) {
    try {
        const request = {
            chainId,
            data,
            from,
            to,
            value,
        };
        const simulationRequest = {
            environmentId,
            simulateEVMTransactionRequest: request,
        };
        const transactionData = yield sdkApi().simulateEVMTransaction(simulationRequest);
        return transactionData;
    }
    catch (error) {
        logger.warn('simulateBlockaidEVMTransaction error', error);
        return undefined;
    }
});
const simulateBlockaidSVMTransaction = (_c) => __awaiter(void 0, [_c], void 0, function* ({ environmentId, chain, accountAddress, transactions, }) {
    var _d;
    try {
        const request = {
            environmentId,
            simulateSVMTransactionRequest: {
                accountAddress,
                chain: chain,
                domain: (_d = getAppOrigin()) !== null && _d !== void 0 ? _d : 'https://example.com',
                // signAll works the same as sign, signAndSend, signAll
                method: 'signAllTransactions',
                transactions,
            },
        };
        const transactionData = yield sdkApi().simulateSVMTransaction(request);
        return transactionData;
    }
    catch (error) {
        logger.warn('simulateBlockaidSVMTransaction error', error);
        return undefined;
    }
});

export { isMaliciousUrl, simulateBlockaidEVMTransaction, simulateBlockaidSVMTransaction };
