import { Chain } from './WalletConnector';
export type ChainInfo = {
    blockchainName: string;
    displayName: string;
    name: string;
    symbol: Chain;
};
export type WalletEvent = 'accountChanged' | 'chainChanged';
export type WalletMethod = 'getConnectedAccounts';
export type WalletLimitations = {
    browserExtension?: {
        unsupportedEvents?: WalletEvent[];
        unsupportedMethods?: WalletMethod[];
    };
};
export type WalletDownloadLinks = {
    chromeId?: string;
    edgeId?: string;
    firefoxId?: string;
    operaId?: string;
    safariId?: string;
    androidId?: string;
    iosId?: string;
};
export type WalletDeepLinks = {
    native?: string;
    universal?: string;
};
/**
 * @property id - A key that can be used to identify the wallet/connector, based on the wallet name
 * @property name - The wallet name
 * @property icon - The url or data for the wallet icon
 * @property brandColor - The hex valye for the wallet brand color
 * @property groupKey - Key used to group wallets together, for example, by chain
 * @property deepLinks - The mobile deep links of the wallet
 * @property downloadLinks - The ids to download the wallet in the different browsers and mobile stores
 * @property walletLimitations - The limitations of the wallet in regards to methods and events
 * @property rdns - The wallet rdns if it supports EIP-6963
 */
export type WalletMetadata = {
    id: string;
    name: string;
    icon: string;
    brandColor?: `#${string}`;
    groupKey?: string;
    deepLinks?: WalletDeepLinks;
    downloadLinks?: WalletDownloadLinks;
    walletLimitations?: WalletLimitations;
    rdns?: string;
};
export declare namespace WalletConnectorCore { }
