{"version":3,"file":"static/js/67.223705a1.chunk.js","mappings":";+KAUA,MAAMA,GAAKC,UAAAA,IAAMC,OAAO,uEAClBC,EAAUH,EAAGI,OAAOF,OAAO,OAC3BG,EAAUH,OAAO,sEAGVI,GAAOC,EAAAA,EAAAA,GAAY,CAC9BC,EAAGL,EACHM,EAAGJ,EACHL,KAEAU,EAAGR,OAAO,sEAEVS,GAAIT,OAAO,sEACXU,GAAIV,OAAO,sEACXW,EAAGX,OAAO,GACVY,MAAM,GACIC,EAAAA,kCCtBCC,EAAiB,UAK5B,MAAMC,EAAYX,EAAKY,aAAaC,EAAMC,YAAY,GAGhDC,GAAkBC,EAAAA,EAAAA,IAAsBL,GAE9C,GAAII,GAAmBF,EAAMF,UAC3B,MAAM,IAAIM,MACR,2CAA2CJ,EAAMF,kBAAkBI,KAIvE,MAAMG,GAAOC,EAAAA,EAAAA,KAAaC,OAAOP,EAAMQ,SAASC,SAEhD,OADkBtB,EAAKuB,KAAKL,EAAML,EAAMC,YACvBU,UAAU","sources":["../../../../node_modules/@noble/curves/src/p256.ts","../../src/purejs.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher } from './abstract/hash-to-curve.js';\nimport { Field } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\n\n// NIST secp256r1 aka p256\n// https://www.secg.org/sec2-v2.pdf, https://neuromancer.sk/std/nist/P-256\n\nconst Fp = Field(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst CURVE_A = Fp.create(BigInt('-3'));\nconst CURVE_B = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n\n// prettier-ignore\nexport const p256 = createCurve({\n  a: CURVE_A, // Equation params: a, b\n  b: CURVE_B,\n  Fp, // Field: 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n\n  // Curve order, total count of valid points in the field\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n  h: BigInt(1),\n  lowS: false,\n} as const, sha256);\nexport const secp256r1 = p256;\n\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: CURVE_A,\n    B: CURVE_B,\n    Z: Fp.create(BigInt('-10')),\n  }))();\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(secp256r1.ProjectivePoint, (scalars: bigint[]) => mapSWU(scalars[0]), {\n    DST: 'P256_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n  }))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n"],"names":["Fp","Field","BigInt","CURVE_A","create","CURVE_B","p256","createCurve","a","b","n","Gx","Gy","h","lowS","sha256","signWithApiKey","publicKey","getPublicKey","input","privateKey","publicKeyString","uint8ArrayToHexString","Error","hash","createHash","update","content","digest","sign","toDERHex"],"sourceRoot":""}